
# BANCO DE DADOS
spring.datasource.url=jdbc:mysql://localhost:3306/customer?createDatabaseIfNotExist=true&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=root
#spring.datasource.password=${db_password}

# AUTO GERAR AS TABELAS (USADO EM DESENVOLVIMENTO)
# EM PRODU\u00C7\u00C3O UTILIZA FLYWAY 
# spring.jpa.generate-ddl=true
# spring.jpa.hibernate.ddl-auto=create

## PARA CRIAR O SCHEMA 
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

# Flyway - cria\uFFFD\uFFFDo do banco versionado  
spring.flyway.baseline-on-migrate=true
spring.flyway.enabled=true


spring.jpa.show-sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# The dialect must be default using this way Spring detect the dialect for each database.
spring.jpa.database=default


spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=America/Sao_Paulo
spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.fail-on-ignored-properties=true


# SEGURANÃ‡A
seguranca.cors-origem-permitida=http://localhost:4200

#server.port=8888
#server.context-path=/my-app

#server.max-http-header-size=1048576 

debug=false
logging.level.org.springframework.web=INFO
logging.level.guru.springframework.controllers=DEBUG
logging.level.org.hibernate=ERROR
logging.file.name=logs/spring-boot-logging.log

# mostra os parametros do SQL 
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE




# spring.cache.cache-names=cargo
# spring.cache.caffeine.spec=maximumSize=100,expireAfterAccess=1800s

#------ Redis Properties -------------
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379
spring.cache.redis.time-to-live=10000


# cria par de chaves armazenado no arquivo jks
# keytool -genkeypair -alias aCreditaKey -keyalg RSA -keypass 123456 -keystore aCredita.jks -storepass 123456 -validity 3650

# exporta o par de chaves para um arquivo de certificado 
# keytool -export -rfc -alias aCreditaKey -keystore aCredita.jks -file aCredita-cert.pem
# 
# extrai apenas a chave publica do arquivo
# openssl x509 -pubkey -noout -in aCredita-cert.pem > aCredita-pubkey.pem

seguranca.jwt.keystore.path=keystores/aCredita.jks
seguranca.jwt.keystore.password=123456
seguranca.jwt.keystore.keypair-alias=aCreditaKey


spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:keys/aCredita-pubkey.pem


logging.level.reactor.netty.http.client.HttpClient: DEBUG