#
# to build: 
#   docker-compose -f docker-compose-dev.yaml up -d --build
# just to run 
#   docker-compose -f docker-compose-dev.yaml up -d 
# to down 
# docker-compose -f docker-compose-dev.yaml down
version: '3'

services: 
# Json=server  
    json-server:
        image: clue/json-server
        container_name: json-server

        tty: true

        volumes:
            - .\db.json:/data/db.json

        ports:
            - 81:80

        networks: 
            - app-net

# Mysql
    db:
        image: mysql:8.0.20
        container_name: db

        tty: true

        ports:
            - 3307:3306
        
        volumes:
            - .\mysqldata:/var/lib/mysql

        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_ROOT_DATABASE: authenticator
            MYSQL_USER: root
            INNODB_FORCE_RECOVERY: 1

        networks:
            - app-net

# Jaeger - opentracing 
# to access trace http://localhost/16686
    tracer:
        image: jaegertracing/all-in-one:1.28
        container_name: tracer

        ports:
            - 6831:6831/udp
            - 6832:6832/udp
            - 16686:16686
            - 14268:14268

        networks: 
            - app-net

# authorization-server-api
    authorization-server:
        build: 
            context: .
            dockerfile: Dockerfile-authorization-server
        image: luck/authorization-server
        container_name: authorizationserver
        ports:
            - 8081:8080

        depends_on:
            - db

        entrypoint: dockerize -wait tcp://db:3306 -timeout 180s java -jar app.jar
        
        tty: true
        environment:
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/authorizationserver?createDatabaseIfNotExist=true&serverTimezone=UTC&useLegacyDatetimeCode=false
            - SPRING_DATASOURCE_USERNAME=root
            - SPRING_DATASOURCE_PASSWORD=root 

        networks: 
            - app-net

# NgInx
    nginx:
        build: 
            context: .
            dockerfile: Dockerfile-nginx
        image: luck/mynginx

        container_name: nginx
        ports: 
            - "80:80"

        depends_on: 
            - db
            - redis 
            - customer
            - rabbitMQ

        networks: 
            - app-net

# Redis
    redis:
        image: redis:6.2.3
        container_name: redis
        ports:
            - 6379:6379

        healthcheck:
            test: [ "CMD", "redis-cli", "ping"]
            interval: 1s
            timeout: 3s
            retries: 30

        networks: 
            - app-net

# redis-commander            
    redis-commander:
        build: 
            context: .
            dockerfile: Dockerfile-Redis-Commander
        image: luck/redis-commander
        container_name: redis-commander

        ports:
            - 3000:8081
        
        tty: true
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379

        networks: 
            - app-net

# RabbitMQ
    rabbitMQ:
        image: rabbitmq:3.8.3-management
        container_name: rabbitMQ
        ports:
            - 5672:5672 # porta para troca de mensagens 
            - 15672:15672 ## porta do gerenciador do rabbitmq

        volumes:
            - $PWD/storage/rabbitmq1:/var/lib/rabbitmq

        environment:
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=admin

        networks: 
            - app-net
            
# PhpMyAdmin
    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        container_name: mySqlAdmin

        tty: true

        ports:
            - 9090:80

        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=db 
            # PMA_HOST - na hora de logar informar apenas usuario e senha o host nao precisa

        networks: 
            - app-net

# score-api
    score-api:
        build: 
            context: .
            dockerfile: Dockerfile-score-api
        image: luck/score-api
        container_name: score-api

        ports:
            - 8082:8080

        depends_on:
            - db
            
        entrypoint: dockerize -wait tcp://db:3306 -wait tcp://tracer:14268 -timeout 180s java -jar app.jar
        
        tty: true
        environment:
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/authorizationserver?createDatabaseIfNotExist=true&serverTimezone=UTC&useLegacyDatetimeCode=false
            - SPRING_DATASOURCE_USERNAME=root
            - SPRING_DATASOURCE_PASSWORD=root 
            - OPENTRACING_JAEGER_HTTP-SENDER_URL=http://tracer:14268/api/traces


        networks: 
            - app-net

# application-log-api            
    application-log-api:
        build: 
            context: .
            dockerfile: Dockerfile-application-log-api
        image: luck/application-log-api
        container_name: application-log-api

        ports:
            - 8089:8080

        entrypoint: dockerize -wait tcp://tracer:14268 -wait tcp://rabbitMQ:5672 -wait tcp://redis:6379 -wait tcp://db:3306 -timeout 180s java -jar app.jar
        
        tty: true
        environment:
            - SPRING_RABBITMQ_HOST=rabbitMQ
            - SPRING_RABBITMQ_PORT=5672
            - SPRING_RABBITMQ_USERNAME=admin
            - SPRING_RABBITMQ_PASSWORD=admin
            - SPRING_REDIS_HOST=redis
            - SPRING_REDIS_PORT=6379
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/logs?createDatabaseIfNotExist=true&serverTimezone=UTC&useLegacyDatetimeCode=false
            - SPRING_DATASOURCE_USERNAME=root
            - SPRING_DATASOURCE_PASSWORD=root 
            - OPENTRACING_JAEGER_HTTP-SENDER_URL=http://tracer:14268/api/traces


        depends_on:
            - rabbitMQ
            - tracer

        networks: 
            - app-net


# customer-api
    customer:
        build: 
            context: .
            dockerfile: Dockerfile-customer-api
        image: luck/customer-api

        depends_on:
            - db
            - redis 
            - rabbitMQ
            - tracer
            - score-api

        entrypoint: dockerize -wait tcp://tracer:14268 -wait tcp://db:3306 -wait tcp://rabbitMQ:5672 -wait tcp://redis:6379  -wait tcp://score-api:8080  -timeout 360s java -jar app.jar
        
        tty: true
        environment:
            - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/customer?createDatabaseIfNotExist=true&serverTimezone=UTC&useLegacyDatetimeCode=false
            - SPRING_REDIS_HOST=redis
            - SPRING_REDIS_PORT=6379
            - SPRING_DATASOURCE_USERNAME=root
            - SPRING_DATASOURCE_PASSWORD=root 
            # - OTHER_API_PEOPLE=http://localhost:81/people
            # - OTHER_API_INCOME=http://localhost:81/income-and-possessions
            # - OTHER_API_EVENTS=http://localhost:81/events
            # - OTHER_API_AUTH=http://localhost:8081/oauth/token
            - OTHER_API_PEOPLE=http://json-server:80/people
            - OTHER_API_INCOME=http://json-server:80/income-and-possessions
            - OTHER_API_EVENTS=http://json-server:80/events
            - OTHER_API_SCORE=http://score-api:8080/api/private/scores
            - OTHER_API_AUTH=http://localhost:8081/oauth/token
            - SPRING_RABBITMQ_HOST=rabbitMQ
            - SPRING_RABBITMQ_PORT=5672
            - SPRING_RABBITMQ_USERNAME=admin
            - SPRING_RABBITMQ_PASSWORD=admin
            - OPENTRACING_JAEGER_HTTP-SENDER_URL=http://tracer:14268/api/traces


        networks: 
            - app-net 
networks: 
    app-net:
        name: app-net
        driver: bridge     